In this experiment i created REST API for Playing Card Collection Using Express.js

1. This Express.js application creates a simple REST API for managing a collection of playing cards. 
2. It uses middleware to handle Cross-Origin Resource Sharing (CORS) and to parse incoming JSON data, then defines several routes to perform CRUD (Create, Read, Update, Delete) operations on a cards array.

Setup and Middleware:

1. The code begins by importing the necessary modules: express for the web framework and cors to allow requests from different origins. It then initializes the express app and sets the PORT.
2. The app.use(cors()) line enables CORS for all routes, which is essential for allowing web clients (like a frontend application) to make requests to this API. app.use(express.json())
3. The middleware that parses incoming request bodies with JSON payloads, making req.body available for use in subsequent route handlers.

Data and Utility:

1. A cards array is defined to serve as a simple in-memory database.
2. Each object in the array represents a card with an id, suit, and value. The nextId() function is a utility that dynamically generates a unique id.
3. The new cards by finding the highest existing id and incrementing it. This ensures that new cards don't have conflicting IDs.

API Endpoints:
1. GET /: This is a read route that serves as a simple health check or service description.
2. GET /cards: This is another read route that retrieves all cards in the collection. It responds with a 200 OK status and the entire cards array.
3. GET /cards/:id: This read route retrieves a single card by its ID
4. The :id in the URL is a route parameter.
5. POST /cards: This create route adds a new card to the collection. It expects a JSON request body with suit and value properties
6. f validation passes, it creates a new card object with a unique ID and adds it to the cards array. The response is a 201 Created status along with a success message and the newly created card.
7. DELETE /cards/:id: This delete route removes a card from the collection by its ID.
8. t finds the index of the card and uses splice() to remove it. If the card isn't found, it returns a 404 Not Found error.

Server Activation:

1. The final line, app.listen(PORT, ...) starts the web server.
2.  It listens for incoming requests on the specified port and logs a confirmation message to the console.
3. indicating that the API is running and ready to serve requests.

Learning Outcomes:

1. Client-Server Interaction: Understanding how a server listens for and responds to requests from a client.
2. Setting up an Express Server: Knowing how to initialize an Express application and start a web server on a specific port.
3. Array Methods: Applying array methods like find(), findIndex(), map(), some(), and splice() to efficiently manipulate data.
4. Conditional Logic and Validation: Implementing if statements to validate incoming data and handle potential errors, such as missing required fields or duplicate entries.
5. Object Destructuring: Using object destructuring to easily extract properties like suit and value from the request body.